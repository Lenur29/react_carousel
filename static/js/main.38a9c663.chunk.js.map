{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollPosition","slideController","fullScrollingLength","props","images","length","setScrollPosition","direction","itemWidth","step","allSliders","Math","ceil","scrollingLength","setState","currentState","result","newScrollingLength","this","frameSize","animationDuration","className","style","width","transform","transitionDuration","map","image","index","src","alt","height","type","onClick","classNames","React","Component","App","infinite","setStep","e","output","document","querySelector","textContent","currentTarget","value","setFrameSize","setItemWidth","setAnimationDuration","action","htmlFor","name","defaultValue","id","min","max","onInput","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.38a9c663.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  scrollPosition: number,\n  slideController: number,\n  fullScrollingLength: number,\n};\n\ntype ScrollDirection = 'prev' | 'next';\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scrollPosition: 0,\n    slideController: 0,\n    fullScrollingLength: this.props.images.length,\n  };\n\n  setScrollPosition = (direction: ScrollDirection) => {\n    const { itemWidth, step, images } = this.props;\n    const { slideController, fullScrollingLength } = this.state;\n    const allSliders = Math.ceil((images.length - step) / step);\n    const scrollingLength = fullScrollingLength - step;\n\n    if (direction === 'next' && slideController !== allSliders) {\n      this.setState((currentState) => {\n        let result;\n        let newScrollingLength;\n\n        if (scrollingLength > step) {\n          result = currentState.scrollPosition - step * itemWidth;\n          newScrollingLength = fullScrollingLength - step;\n        } else {\n          result = currentState.scrollPosition - scrollingLength * itemWidth;\n          newScrollingLength = 0;\n        }\n\n        return {\n          scrollPosition: result,\n          slideController: currentState.slideController + 1,\n          fullScrollingLength: newScrollingLength,\n        };\n      });\n    }\n\n    // if (direction === 'prev' && slideController !== 0) {\n    //   this.setState((currentState) => {\n    //     let result;\n    //     let newScrollingLength;\n\n    //     if (scrollingLength > step) {\n    //       result = currentState.scrollPosition - step * itemWidth;\n    //       newScrollingLength = fullScrollingLength - step;\n    //     } else {\n    //       result = currentState.scrollPosition - scrollingLength * itemWidth;\n    //       newScrollingLength = 0;\n    //     }\n\n    //     return {\n    //       scrollPosition: result,\n    //       slideController: currentState.slideController + 1,\n    //       fullScrollingLength: newScrollingLength,\n    //     };\n    //   });\n    // }\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const { scrollPosition } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <div className=\"Carousel__container\" style={{ width: frameSize * itemWidth }}>\n          <ul className=\"Carousel__list\" style={{ transform: `translateX(${scrollPosition}px)`, transitionDuration: `${animationDuration}ms` }}>\n            {images.map((image, index) => (\n              <li\n                key={image}\n                className=\"Carousel__item\"\n              >\n                <img\n                  src={image}\n                  alt={`${index + 1}`}\n                  className=\"Carousel__image\"\n                  style={{ width: itemWidth, height: itemWidth }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"buttons-container\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.setScrollPosition('prev');\n            }}\n            className={classNames('prev-button')}\n          >\n            <div className=\"prev-button__form\" />\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.setScrollPosition('next');\n            }}\n            className={classNames('next-button')}\n          >\n            <div className=\"next-button__form\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  setStep = (e: React.FormEvent<HTMLInputElement>) => {\n    const output = document.querySelector('.width');\n\n    if (output) {\n      output.textContent = e.currentTarget.value;\n    }\n\n    this.setState({ step: +e.currentTarget.value });\n  };\n\n  setFrameSize = (e: React.FormEvent<HTMLInputElement>) => {\n    const output = document.querySelector('.frame-size');\n\n    if (output) {\n      output.textContent = e.currentTarget.value;\n    }\n\n    this.setState({ frameSize: +e.currentTarget.value });\n  };\n\n  setItemWidth = (e: React.FormEvent<HTMLInputElement>) => {\n    const output = document.querySelector('.item-width');\n\n    if (output) {\n      output.textContent = e.currentTarget.value;\n    }\n\n    this.setState({ itemWidth: +e.currentTarget.value });\n  };\n\n  setAnimationDuration = (e: React.FormEvent<HTMLInputElement>) => {\n    const output = document.querySelector('.animation-duration');\n\n    if (output) {\n      output.textContent = e.currentTarget.value;\n    }\n\n    this.setState({ animationDuration: +e.currentTarget.value });\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>\n          Carousel with\n          {images.length}\n          images\n        </h1>\n\n        <Carousel\n          {...this.state}\n        />\n        <form className=\"form\" action=\"#\">\n          <label htmlFor=\"width\">\n            Step:\n            <output className=\"width\" name=\"step\" htmlFor=\"width\">3</output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              name=\"number\"\n              id=\"width\"\n              min=\"1\"\n              max=\"5\"\n              onInput={this.setStep}\n            />\n          </label>\n\n          <label htmlFor=\"frameSize\">\n            Frame size:\n            <output className=\"frame-size\" name=\"frameSize\"> 3 </output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              min=\"1\"\n              max=\"5\"\n              onInput={this.setFrameSize}\n            />\n          </label>\n\n          <label htmlFor=\"itemWidth\">\n            Image width:\n            <output className=\"item-width\" name=\"itemWidth\"> 130 </output>\n            <input\n              type=\"range\"\n              defaultValue=\"130\"\n              name=\"itemWidth\"\n              id=\"itemWidth\"\n              min=\"80\"\n              max=\"200\"\n              onInput={this.setItemWidth}\n            />\n          </label>\n\n          <label htmlFor=\"animationDuration\">\n            Animation duration:\n            <output className=\"animation-duration\" name=\"animationDuration\"> 1000 </output>\n            <input\n              type=\"range\"\n              defaultValue=\"1000\"\n              name=\"animation-duration\"\n              id=\"animation duration\"\n              min=\"500\"\n              max=\"4000\"\n              onInput={this.setAnimationDuration}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}